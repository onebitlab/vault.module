// internal/tui/components/status_bar.go
package components

import (
	"fmt"
	"strings"

	"vault.module/internal/tui/utils"
)

// StatusBar –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å–Ω—É—é —Å—Ç—Ä–æ–∫—É
type StatusBar struct {
	theme      *utils.Theme
	width      int
	leftText   string
	rightText  string
	centerText string
}

// NewStatusBar —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é —Å—Ç–∞—Ç—É—Å–Ω—É—é —Å—Ç—Ä–æ–∫—É
func NewStatusBar(theme *utils.Theme) *StatusBar {
	return &StatusBar{
		theme: theme,
		width: 80,
	}
}

// SetWidth —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —à–∏—Ä–∏–Ω—É —Å—Ç–∞—Ç—É—Å–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
func (sb *StatusBar) SetWidth(width int) {
	sb.width = width
}

// SetLeftText —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç —Å–ª–µ–≤–∞
func (sb *StatusBar) SetLeftText(text string) {
	sb.leftText = text
}

// SetRightText —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç —Å–ø—Ä–∞–≤–∞
func (sb *StatusBar) SetRightText(text string) {
	sb.rightText = text
}

// SetCenterText —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –ø–æ —Ü–µ–Ω—Ç—Ä—É
func (sb *StatusBar) SetCenterText(text string) {
	sb.centerText = text
}

// Render –æ—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å–Ω—É—é —Å—Ç—Ä–æ–∫—É
func (sb *StatusBar) Render() string {
	leftLen := len(sb.leftText)
	rightLen := len(sb.rightText)
	centerLen := len(sb.centerText)

	// –í—ã—á–∏—Å–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ
	availableWidth := sb.width - leftLen - rightLen

	var result string

	if centerLen > 0 && availableWidth >= centerLen+2 {
		// –ï—Å—Ç—å –º–µ—Å—Ç–æ –¥–ª—è —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
		leftPadding := (availableWidth - centerLen) / 2
		rightPadding := availableWidth - centerLen - leftPadding

		result = sb.leftText +
			strings.Repeat(" ", leftPadding) +
			sb.centerText +
			strings.Repeat(" ", rightPadding) +
			sb.rightText
	} else {
		// –¢–æ–ª—å–∫–æ –ª–µ–≤—ã–π –∏ –ø—Ä–∞–≤—ã–π —Ç–µ–∫—Å—Ç
		padding := availableWidth
		if padding < 0 {
			padding = 0
		}

		result = sb.leftText +
			strings.Repeat(" ", padding) +
			sb.rightText
	}

	return sb.theme.Status.Render(result)
}

// SetVaultInfo —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º vault'–µ
func (sb *StatusBar) SetVaultInfo(vaultName string, isAuthenticated bool) {
	if vaultName != "" {
		authStatus := "üîí"
		if isAuthenticated {
			authStatus = "üîì"
		}
		sb.SetLeftText(fmt.Sprintf("Vault: %s %s", vaultName, authStatus))
	} else {
		sb.SetLeftText("No vault selected")
	}
}

// SetHelpText —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç —Å–ø—Ä–∞–≤–∫–∏
func (sb *StatusBar) SetHelpText(text string) {
	sb.SetRightText(text)
}
